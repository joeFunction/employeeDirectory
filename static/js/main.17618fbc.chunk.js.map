{"version":3,"sources":["logo.svg","components/table/index.js","components/container/index.js","utils/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableRow","props","Table","hover","onClick","handleSubmit","results","length","map","person","index","scope","src","picture","thumbnail","name","first","last","email","phone","Container","className","children","axios","get","App","state","original","search","handleInputChange","event","target","value","setState","console","log","newEmployees","filter","employee","toLowerCase","includes","columnName","sort","a","b","localeCompare","Api","then","people","data","Input","style","width","this","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,uKCoD5BC,EA9CE,SAACC,GAChB,OACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,GACV,+BACE,4BACE,iCACA,uCACA,wBAAIC,QAAW,kBAAMH,EAAMI,aAAa,WAAxC,cACA,wBAAID,QAAW,kBAAMH,EAAMI,aAAa,UAAxC,aACA,qCAEA,uCAIJ,+BACKJ,EAAMK,QAAQC,OAAS,EAAIN,EAAMK,QAAQE,KAAI,SAACC,EAAQC,GACrD,OACZ,4BACY,wBAAIC,MAAM,OAAOD,EAAO,GAC1B,4BAAI,yBAAKE,IAAOH,EAAOI,QAAQC,aAC7B,4BAAKL,EAAOM,KAAKC,OACjB,4BAAKP,EAAOM,KAAKE,MACjB,4BAAKR,EAAOS,OACd,4BAAKT,EAAOU,WAGP,4BACH,6BACA,6BACA,6BACA,6BACA,6BACA,iCC9BGC,MARf,SAAoBnB,GACjB,OACE,yBAAKoB,UAAY,aACdpB,EAAMqB,W,yBCDC,EACI,WACf,OAAOC,IAAMC,IAAI,2CC0DNC,E,4MAtDbC,MAAQ,CACNpB,QAAS,GACTqB,SAAU,GACVC,OAAQ,I,EAWVC,kBAAoB,SAACC,GAAW,IAAD,EACHA,EAAMC,OAAtBhB,EADmB,EACnBA,KAAMiB,EADa,EACbA,MACd,EAAKC,SAAL,eACGlB,EAAOiB,IAEVE,QAAQC,IAAIH,GACX,IAAMI,EAAe,EAAKV,MAAMC,SAASU,QAAO,SAAAC,GAC9C,OAAOA,EAASvB,KAAKC,MAAMuB,cAAcC,SAASR,EAAMO,kBAE1D,EAAKN,SAAS,CACZ3B,QAAS8B,K,EAGhB/B,aAAe,SAACoC,GACd,IAAML,EAAe,EAAKV,MAAMpB,QAAQoC,MAAK,SAACC,EAAEC,GAC9C,OAAOD,EAAE5B,KAAK0B,GAAYI,cAAcD,EAAE7B,KAAK0B,OAIjD,EAAKR,SAAS,CACZ3B,QAAS8B,K,kEA7BS,IAAD,OACnBU,IAAsBC,MAAK,SAAAC,GAC/Bd,QAAQC,IAAIa,EAAOC,KAAK3C,SAClB,EAAK2B,SAAS,CACZ3B,QAAS0C,EAAOC,KAAK3C,QACrBqB,SAAUqB,EAAOC,KAAK3C,e,+BA6B1B,OACE,kBAAC,EAAD,CAAWe,UAAU,OAArB,cACc,kBAAC6B,EAAA,EAAD,CAAOC,MAAS,CAACC,MAAO,OAAQrC,KAAK,SAASiB,MAAOqB,KAAK3B,MAAME,OAC3E0B,SAAYD,KAAKxB,oBAGjB,kBAAC,EAAD,CAAYvB,QACV+C,KAAK3B,MAAMpB,QACVD,aAAgBgD,KAAKhD,oB,GAhDfkD,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.17618fbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React from 'react';\nimport { Table } from 'reactstrap';\n// props{\n//   results\n// }\nconst TableRow = (props) => {\n  return (\n    <Table hover>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Picture</th>\n          <th onClick = {() => props.handleSubmit(\"first\")}>First Name</th>\n          <th onClick = {() => props.handleSubmit(\"last\")}>Last Name</th>\n          <th>Email</th>\n\n          <th>Phone</th>\n\n        </tr>\n      </thead>\n      <tbody>\n          {props.results.length > 0 ? props.results.map((person, index) => {\n            return (\n<tr>\n            <th scope=\"row\">{index +1}</th>\n          <td><img src = {person.picture.thumbnail}/></td>\n            <td>{person.name.first}</td>\n            <td>{person.name.last}</td>\n            <td>{person.email}</td>\n          <td>{person.phone}</td>\n        </tr>\n            )\n          }): (<tr>\n            <th></th>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            \n            \n            </tr>)}\n\n        \n        \n        \n      </tbody>\n    </Table>\n  );\n}\n\nexport default TableRow;","import React from \"react\"\nfunction Container (props) {\n   return (\n     <div className = \"container\">\n       {props.children}\n     </div>\n   )\n}\n\nexport default Container","import axios from \"axios\"\n\n\nexport default {\n  getRandomPeople: function () {\n    return axios.get(\"https://randomuser.me/api/?results=100\")\n  }\n}","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TableRow from \"./components/table\"\nimport Container from \"./components/container\"\nimport { Input } from \"reactstrap\"\nimport Api from \"./utils/api\"\n\nclass App extends Component {\n  state = {\n    results: [], \n    original: [],\n    search: \"\"\n  }\n  componentDidMount () {\n    Api.getRandomPeople().then(people => {\nconsole.log(people.data.results)\n      this.setState({\n        results: people.data.results,\n        original: people.data.results\n      }) \n    }) \n  }\n  handleInputChange = (event) => {\n      const { name, value } = event.target\n      this.setState({ \n        [name]: value\n      })\n      console.log(value)\n       const newEmployees = this.state.original.filter(employee => {\n         return employee.name.first.toLowerCase().includes(value.toLowerCase())\n       })   \n       this.setState({ \n         results: newEmployees\n       })\n  }\n  handleSubmit = (columnName) => {\n    const newEmployees = this.state.results.sort((a,b) => {\n      return a.name[columnName].localeCompare(b.name[columnName]) \n      console.log(a.name[columnName])\n    })\n\n    this.setState({ \n      results: newEmployees\n    })\n  }\n\n  render () {\n    return (\n      <Container className=\"App\">\n         search :   <Input style = {{width: \"50%\"}} name=\"search\" value={this.state.search}\n         onChange = {this.handleInputChange}\n         \n         />\n         <TableRow   results= {\n           this.state.results\n         }  handleSubmit = {this.handleSubmit} />\n      </Container>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}